<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>li.3egg.alfred.alert</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>32A9D2D9-2C8F-4975-A3D2-FEABE8994A89</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>D035E554-1F4C-491E-A5EA-C4F5CCA48E37</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>D035E554-1F4C-491E-A5EA-C4F5CCA48E37</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>9F2E5C3B-1860-480A-A471-CFC328821E86</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>49FFA4DC-7E67-4646-A8C3-C2E67B92015E</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Christian RÃ¼egg</string>
	<key>description</key>
	<string>Show alert after a certain time</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Alert</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import os, sys
import time
import datetime

def parse_time(time_str, now = datetime.datetime.now()):
    if time_str.isdigit():
        return int(time_str)

    if time_str.find(':') &gt;= 0:
        try:
            format = ''
            if time_str.lower().find('am') &gt; 0 or time_str.lower().find('pm') &gt; 0:
                format = '%I:%M%p'
            else:
                format = '%M:%S'
                if time_str.count(':') &gt; 1:
                    format = '%H:' + format
                else:
                    raise RuntimeError("Parse Error time '{}' has invalid number of ':'".format(time_str))

            time_struct = time.strptime(time_str, format)
            #sys.stderr.write("parse {}\n".format(time_struct))
            #date_time = datetime.fromtimestamp(mktime(time_struct))
            #delta = date_time - datetime.datetime.now()
            #sys.stderr.write("delta {}\n".format(delta))
            
            seconds_since_midnight = int((now - now.replace(hour=0, minute=0, second=0, microsecond=0)).total_seconds())
            secs = time_struct.tm_hour*3600 + time_struct.tm_min*60 + time_struct.tm_sec
            secs -= seconds_since_midnight
            if secs &lt; 0:
                secs += 86400
            return secs
        except Exception as e:
            sys.stderr.write("Parse Error {}\n".format(e))
        return 10

    lookup = {
        's': 1,
        'm': 60,
        'h': 60*60,
    }
    for unit, factor in lookup.items():
        if time_str.endswith(unit):
            firstPart = time_str[:-(len(unit))]
            if firstPart.isdigit():
                return int(firstPart) * factor
 
    return 10

def parse_test():
    now = datetime.datetime.now()
    def time_diff(secs):
        seconds_since_midnight = int((now - now.replace(hour=0, minute=0, second=0, microsecond=0)).total_seconds())
        if secs &gt;= seconds_since_midnight:
            return secs - seconds_since_midnight
        return 86400 - seconds_since_midnight + secs
    test_data = [
        ('00:00:00', time_diff(0)),
        ('23:59:59', time_diff(86399)),
        ('7:40AM', time_diff(7*3600 + 40*60)),
        ('7:40PM', time_diff(19*3600 + 40*60)),
        ('4:30pm', time_diff(16*3600 + 30*60)),
        ('22:19:55', time_diff(22*3600 + 19*60 + 55)),
        ('12:30PM', time_diff(12*3600 + 30*60)),
        ('10:12:45', time_diff(10*3600 + 12*60 + 45)),
        ('17:08:00', time_diff(17*3600 + 8*60)),
        ('08:15:27', time_diff(8*3600 + 15*60 + 27)),
        ('5', 5),
        ('15s', 15),
        ('23m', 23*60),
        ('19h', 19*3600),
    ]

    for time_str, expected in test_data:
        seconds = parse_time(time_str, now)
        if expected == seconds:
            sys.stderr.write("Parsing OK '{}'\n".format(time_str))
        else:
            sys.stderr.write("Parsing FAILED '{}'\n".format(time_str))
            sys.stderr.write("  expected '{}'\n".format(expected))
            sys.stderr.write("  actual   '{}'\n".format(seconds))




if __name__ == '__main__':
    query = "{query}"
    #sys.stderr.write('query: "' + query + "'\n")
    args = query.split(' ')
    #sys.stderr.write("len {}\n".format(len(args)))
    #sys.stderr.write("args: |{}|\n".format('|'.join(args)))

    timeStr = '2'
    message = 'Hello World'
    if len(args) &gt; 1:
        timeStr = args[0].strip()
        message = ' '.join(args[1:])
    elif len(args) == 0:
        parse_test()
        sys.exit(0)

    sys.stderr.write("timeStr '{}'\n".format(timeStr))
    sys.stderr.write("message '{}'\n".format(message))

    timeout = parse_time(timeStr)
    sys.stderr.write("timeout '{}'\n".format(timeout))
    time.sleep(timeout)
    print(message.encode('utf8'))</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string>bla.py</string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>D035E554-1F4C-491E-A5EA-C4F5CCA48E37</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string></string>
				<key>title</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>9F2E5C3B-1860-480A-A471-CFC328821E86</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>alert</string>
				<key>subtext</key>
				<string>{time} {message}</string>
				<key>text</key>
				<string>Alert</string>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>32A9D2D9-2C8F-4975-A3D2-FEABE8994A89</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alignment</key>
				<integer>0</integer>
				<key>backgroundcolor</key>
				<string></string>
				<key>fadespeed</key>
				<integer>0</integer>
				<key>fillmode</key>
				<integer>0</integer>
				<key>font</key>
				<string></string>
				<key>largetypetext</key>
				<string>{query}</string>
				<key>textcolor</key>
				<string></string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.largetype</string>
			<key>uid</key>
			<string>49FFA4DC-7E67-4646-A8C3-C2E67B92015E</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Show an alert on the screen and a notification:
- at a specific time
- after a time span

Absolute times:
07:51:38
14:00
7:40PM

Time spans:
5 (corresponds to seconds)
180s (corresponds to 3 minutes)
7m (corresponds to 7 minutes)
12h (corresponds to 12 hours)

Examples
180 Egg is finished
12:00 Don't forget to eat lunch</string>
	<key>uidata</key>
	<dict>
		<key>32A9D2D9-2C8F-4975-A3D2-FEABE8994A89</key>
		<dict>
			<key>xpos</key>
			<integer>45</integer>
			<key>ypos</key>
			<integer>130</integer>
		</dict>
		<key>49FFA4DC-7E67-4646-A8C3-C2E67B92015E</key>
		<dict>
			<key>xpos</key>
			<integer>520</integer>
			<key>ypos</key>
			<integer>260</integer>
		</dict>
		<key>9F2E5C3B-1860-480A-A471-CFC328821E86</key>
		<dict>
			<key>xpos</key>
			<integer>520</integer>
			<key>ypos</key>
			<integer>130</integer>
		</dict>
		<key>D035E554-1F4C-491E-A5EA-C4F5CCA48E37</key>
		<dict>
			<key>xpos</key>
			<integer>285</integer>
			<key>ypos</key>
			<integer>130</integer>
		</dict>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>1.0.0</string>
	<key>webaddress</key>
	<string>https://github.com/Macintron/Alfred-Workflow-Alert</string>
</dict>
</plist>
